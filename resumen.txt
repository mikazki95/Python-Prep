tonatiuh_vr95@hotmail.com 
https://github.com/mikazki95/Python-Prep
resumen der curso de inicio 
puedes encontrar informacion detallada de funciones en:
https://www.w3schools.com/python/ref_func_zip.asp

append(): Agrega un elemento al final de la lista.
mi_lista.append('Blanco') 
insert(): Inserta un elemento en una posición específica de la lista.
mi_lista.insert(3,'Negro')
extend(): Agrega los elementos de otra lista al final de la lista actual.
index(): Devuelve el índice de la primera aparición de un elemento en la lista.
remove(): Elimina la primera aparición de un elemento de la lista.
sort(): Ordena los elementos de la lista en orden ascendente (por defecto) o descendente.
.pop():  Es utilizado en Python para eliminar y devolver el último elemento de una lista. 
rebanada, devuelve un rango de una lista, el limite inferior se incluye y el superior se excluye
por ejemplo:
print(mi_lista[0:2]) tenemos solo el valor 0 y 1 en este caso
------------------------------------------------------------------------------------------
in: se utiliza para verificar si un elemento está presente en la tupla.
count: se utiliza para contar el número de veces que un elemento aparece en la tupla.
list() convierte a lista los valores 
a=[1,2,3]
tuple() convierte a tupla los valores
a=(1,2,3)
dict() convierte a diccionario una lista par de valores, entiendo que{}
son arrays de 2XN
la tupla es no modificable una ves creada
Habíamos visto que los corchetes identifican a las listas, 
los paréntesis a las tuplas, 
y lo que va a identificar a los diccionarios van a ser las llaves. {}

La función 'del' permite eliminar un elemento de un diccionario especificando su clave.

La función 'keys' devuelve una lista con todas las claves que hay en un diccionario.

La función 'len' devuelve la cantidad de elementos que hay en un diccionario.

ejemplo de dicccionario 
mi_diccionario = {  'Colores Primarios': ['Rojo','Azul','Amarillo'], 
                    'Colores secundarios': ['Naranja','Violeta','Verde'], 
                    'Clave3': 10,
                    'Clave4': False}
len(mi_diccionario)
mi_diccionario.keys()
---------------------------------------------------------------------------------------
iterables y funciones 
enumerate() toma un iterable y devuelve un objeto enumerado
    cadena = "Henry"
    for c in enumerate(cadena):
        print(c)
 isinstance() es una funcion que devuelve verdadero o falso si un objeto es una instancia 
 de una clase o subclase 
sum: es una función incorporada en Python que se utiliza para sumar todos los elementos de 
una lista o de un iterable. Toma un iterable como argumento y devuelve la suma de los elementos.
a = (1, 2, 3, 4, 5)
x = sum(a)
x=15

join: es un método de cadena en Python que se utiliza para unir una secuencia de cadenas en una 
sola cadena, utilizando un separador específico. Toma una lista o una tupla de cadenas como argumento
 y devuelve una cadena que consiste en las cadenas de entrada unidas por el separador especificado
 Syntax  string.join(iterable)

    myTuple = ("John", "Peter", "Vicky")

    x = "#".join(myTuple)

    print(x)
-----------------------------------------------------------------------------------------------------------
Definición y uso
La función devuelve Un objeto iterador.iter()
Esto se hace mediante el método next(), que devuelve el siguiente elemento del objeto iterable en cada llamada.
Sintaxis
iter(object, sentinel)
    x = iter(["apple", "banana", "cherry"])
    print(next(x))
    print(next(x))
    print(next(x))
------------------------------------------------------------------------------------------------------------
Zip()
En la sentencia zip, se pueden pasar dos o más iterables como argumentos y se creará un iterador que agrega
los elementos correspondientes de cada iterable. El iterador se detiene cuando se agotan los elementos del
iterable más corto.
    a = ("John", "Charles", "Mike")
    b = ("Jenny", "Christy", "Monica")
    c = (1,2,3,4,5,6,7)
    x = zip(a, b, c)
    print(list(x))
    [('John', 'Jenny', 1), ('Charles', 'Christy', 2), ('Mike', 'Monica', 3)]
nota: al parecer la funcion crea una variable volatil, es decir desaparece. 
------------------------------------------------------------------------------------------------------------
operaciones 
Como aprendiste, Python admite las operaciones aritméticas básicas, 
como la suma (+), 
la resta (-), 
la multiplicación (*), 
la división (/) y 
la potencia (**). 
También puedes realizar operaciones de 
módulo (%) para obtener el resto de una división, 
la división entera (//) para obtener el resultado de la división redondeado al número entero más cercano.
Por ejemplo, "hola" + " mundo!" devolvería la cadena "hola mundo!",
mientras que "ja " * 3 devolvería la cadena "ja ja ja". 
---------------------------------------------------------------------------------------------------------
Definición de funciones 
usa igual 
def nombre(parametros):
    codigo
def imprimir_mensaje():
    print("¡Hola, mundo!")
def sumar(sumando1, sumando2):
    resultado = sumando1 + sumando2
    return resultado
--------------------------------------------------------------------------
help() 
    es una funcion de python para obtener detalles de un objeto o funcion 
copy()
    Este método únicamente se encarga de copiar el objeto que hemos pasado como
argumento, independientemente si contiene en su interior otros objetos mutables. 

Funciones Lambda
    Las funciones Lambda son una forma conveniente de crear una función en una 
sola línea en Python. También se las conoce como funciones anónimas, ya que
no tienen nombre y se asignan a una variable.
lambda_producto = lambda x, y: x * y
-----------------------------------------------------------------------------
clases, las clases se construyen con class: y se inicializan con __init__(selft,parametro)por lo menos 
ejemplo 
class Gato:
    def __init__(self, nombre, edad,raza, sexo):
        self.nombre = nombre
        self.edad = edad
        self.raza = raza
        self.sexo = sexo
    def presentar(self): #siempre las funciones empiezan con self, aun no se porque 
        return print("mi nombere es ",self.nombre," tengo ", self.edad, "raza",self.raza,"sexo",self.sexo)     

estos son atributos, ahora tambien tienen metodos 
los metodos tambien son funciones, definidas don def y para llamarlas ponemos el objeto 
por ejemplo
gato_1=Gato(pompon,2,siames,femenino) esto crea al objeto 
gato_1.presentar()
checar en casa 
 podemos encapsular atributos en una clase con un doble guion bajo (__)
 ejemplo 
 class CuentaBancaria:
    def __init__(self, saldo):
        self.__saldo = saldo  # el atributo saldo está encapsulado con __

    def depositar(self, monto):
        self.__saldo += monto

    def retirar(self, monto):
        if self.__saldo >= monto:
            self.__saldo -= monto
        else:
            print("Saldo insuficiente")

    def obtener_saldo(self):
        return self.__saldo
----------------------------------------------------------------------------
En Python, puedes usar la palabra clave "as" para asignar un alias a un
objeto o módulo. Por ejemplo, puedes importar un módulo y darle un nombre 
más corto usando "as". Por ejemplo: import math as m asigna el alias "m" 
al módulo "math", lo que te permite acceder a sus funciones utilizando 
m.funcion() en lugar de math.funcion().

Por otro lado, la función dir() en Python se utiliza para obtener una 
lista de los nombres existentes en el espacio de nombres actual. 
Puedes llamar a dir() sin argumentos para obtener los nombres definidos 
en el alcance global, o pasarlo un objeto como argumento para obtener los 
nombres disponibles en ese objeto. Esta función es útil para explorar los 
atributos y métodos disponibles en un objeto determinado, ayudándote a 
entender qué funcionalidades ofrece y cómo interactuar con ellas.